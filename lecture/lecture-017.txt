ALIEN VS PREDATOR

CREATURES TABLE

password_digest  id name weapon creature_type_id
                  1 bill  knife 1
                  2 sam   gun   2

creature_type_id is a foreign key that points to primary key of creature type table

creature_type_id linked to table of creature types

id here is primary key

CREATURE TYPES - LOOKUP TABLE (so it's less arbitrary)

id name
1 alien
2 predator
3 pirate

They can send messages to each other

MESSAGES

id  message_text  sender_id receiver_id
1   hey           1         2 
2   yo            2         1

sender_id and receiver_id are primary keys that point to the primary key of the CREATURES TABLE

Creaturetype has_many creatures

IPSUM GEM

puts 10.sentences

ASSETS

lib/assets => a place to put assets across multiple projects

vendor/assets => third party stuff

if something in javascript folder, not

domain/assets/javascripts/dog.txt

it's in

domain/assets/dog.txt

all the assets get pulled into domain assets out of subfolders

rails also does the same thing for LIB and VENDOR

YOU GET TO ANY FILE IN ANY ASSETS SUBFOLDER USING /ASSETS

BOOTSTRAP

put whole bootstrap folder in vendor/assets

 *= require 'css/bootstrap.css' in application.css

 //= require 'js/bootstrap.js' in application.js

stop and restart server

SUBMENU

in home/index.html:

<% content_for :submenu do %> 
  <%= link_to "About", about_path %>
  <%= link_to "FAQ", faq_path %>
<% end %>

the above (content_for) is a named yield

in the layout/application.htm.erb:

<%= yield :submenu %>

AJAX

regular form: 

<%= form_tag '/creaturetypes' do %>
  <%= text_field_tag 'name' %>
  <%= submit_tag 'Create Creature' %>
<% end %>

ajax form:

<%= form_tag '/creaturetypes', :remote => true do %>
  <%= text_field_tag 'name' %>
  <%= submit_tag 'Create Creature' %>
<% end %>

PAGINATION:

kaminari gem

rails g kaminari:config

enter the file in initializers folder
uncomment options

<%= paginate @creature_types %>

edit controller:

instead of   @creature_types = CreatureType.all
do this:   @creature_types = CreatureType.page(params[:page])

SEARCH

create a search form

Don't post a search (can't bookmark it)

Has to be a "get", forms by default do a post

just change the method

QUERYING REVIEW/NEW

You can chain methods
Creature.where(:weapon => 'mace').where(:name => "K")

You can do a map of all the names
Creature.where(:weapon => 'mace').map(&:name)

for more on querying, read 1-5 here:
http://guides.rubyonrails.org/active_record_querying.html

BARTERVILLE

Use bootstrap, pagination, lots of AJAX

1. register
2. login
3. edit profile, including a picture
4. add item to trade with photo/name/description
5. search for stuff, like pianos (use the like keyword to find words in a string) (use pagination here)
6. Barter: Piano page
7. You can request a trade
8. when piano guy logs in, he sees trade request, can approve the offer or not
9. then the property switches hands

ADD

1. Send email
2. Add email address to user table
3. Send email when a trade is successful

